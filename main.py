... (—É—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

@router.callback_query(F.data == "setup_coins")
async def setup_coins(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] setup_coins –≤—ñ–¥ {callback.from_user.id}")
    try:
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ –∞–±–æ —ó—ó —á–∞—Å—Ç–∏–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: btc –∞–±–æ ethereum):")
        user_settings[callback.from_user.id] = user_settings.get(callback.from_user.id, {})
        user_settings[callback.from_user.id]["coins"] = []
        user_settings[callback.from_user.id]["coin_stage"] = True
    except Exception as e:
        logger.error(f"‚ùå setup_coins error: {e}")
        await callback.message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")
    await callback.answer()

@router.callback_query(F.data.startswith("coin_"))
async def select_coin(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] select_coin –≤—ñ–¥ {callback.from_user.id}, data={callback.data}")
    try:
        uid = callback.from_user.id
        coin_id = callback.data[len("coin_") :]
        if coin_id == "done":
            coins = user_settings.get(uid, {}).get("coins", [])
            if len(coins) < 5:
                await callback.message.answer(f"‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ 5 –º–æ–Ω–µ—Ç. –í–∏ –≤–∏–±—Ä–∞–ª–∏: {len(coins)}")
            else:
                await callback.message.answer(f"üîò –ú–æ–Ω–µ—Ç–∏ –æ–±—Ä–∞–Ω–æ: {', '.join(map(str.capitalize, coins))}")
                user_settings[uid].pop("coin_stage", None)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–†–∞–∑ –≤ –≥–æ–¥–∏–Ω—É", callback_data="freq_1h")],
                    [InlineKeyboardButton(text="–†–∞–∑ –≤ 2 –≥–æ–¥–∏–Ω–∏", callback_data="freq_2h")],
                    [InlineKeyboardButton(text="–†–∞–∑ –≤ 12 –≥–æ–¥–∏–Ω", callback_data="freq_12h")],
                    [InlineKeyboardButton(text="–†–∞–∑ –Ω–∞ –¥–µ–Ω—å", callback_data="freq_24h")],
                ])
                await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", reply_markup=keyboard)
        else:
            if "coin_stage" in user_settings.get(uid, {}) and len(user_settings[uid]["coins"]) < 5:
                if coin_id not in user_settings[uid]["coins"]:
                    user_settings[uid]["coins"].append(coin_id)
                    await callback.message.answer(f"‚úÖ –ú–æ–Ω–µ—Ç—É –æ–±—Ä–∞–Ω–æ: {coin_id.replace('-', ' ').title()}")
            elif len(user_settings[uid]["coins"]) >= 5:
                await callback.message.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –≤–∏–±—Ä–∞–ª–∏ 5 –º–æ–Ω–µ—Ç.")
    except Exception as e:
        logger.error(f"‚ùå select_coin error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –º–æ–Ω–µ—Ç–∏.")
    await callback.answer()

@router.callback_query(F.data.startswith("freq_"))
async def select_frequency(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] select_frequency –≤—ñ–¥ {callback.from_user.id}, data={callback.data}")
    try:
        freq = callback.data.split("_")[1]
        uid = callback.from_user.id
        user_settings[uid]["frequency"] = freq

        if freq in ["12h", "24h"]:
            times = [f"{str(h).zfill(2)}:00" for h in range(24)]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=t, callback_data=f"settime_{t}")] for t in times
            ])
            await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", reply_markup=keyboard)
        else:
            await callback.message.answer(f"‚è± –ß–∞—Å—Ç–æ—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: 1 —Ä–∞–∑ –≤ {freq[:-1]} –≥–æ–¥–∏–Ω")
            times = [f"{str(h).zfill(2)}:00" for h in range(24)]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=t, callback_data=f"sleepstart_{t}")] for t in times
            ] + [[InlineKeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —Å–Ω—É", callback_data="sleep_off")]])
            await callback.message.answer("üåô –û–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–æ–∫ '—Ä–µ–∂–∏–º—É —Å–Ω—É' –∞–±–æ –≤–∏–º–∫–Ω—ñ—Ç—å –π–æ–≥–æ:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå select_frequency error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —á–∞—Å—Ç–æ—Ç–∏.")
    await callback.answer()

@router.callback_query(F.data.startswith("settime_"))
async def choose_send_time(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] choose_send_time –≤—ñ–¥ {callback.from_user.id}, data={callback.data}")
    try:
        time = callback.data.split("_")[1]
        uid = callback.from_user.id
        freq = user_settings.get(uid, {}).get("frequency")
        user_settings[uid]["time"] = time

        if "timezone" not in user_settings[uid]:
            offset = datetime.now().astimezone().utcoffset()
            if offset:
                hours = int(offset.total_seconds() // 3600)
                user_settings[uid]["timezone"] = f"{hours:+03d}:00"
                await callback.message.answer(f"üåç –¢–∞–π–º–∑–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {user_settings[uid]['timezone']}")

        if freq == "12h":
            hour = int(time.split(":")[0])
            evening = (hour + 12) % 24
            user_settings[uid]["second_time"] = f"{str(evening).zfill(2)}:00"
            await callback.message.answer(f"‚è± –ß–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time} —Ç–∞ {str(evening).zfill(2)}:00 (12 –≥–æ–¥–∏–Ω)")
        else:
            await callback.message.answer(f"‚è± –ß–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time} (—Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å)")
    except Exception as e:
        logger.error(f"‚ùå choose_send_time error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É.")
    await callback.answer()

@router.callback_query(F.data.startswith("sleepstart_"))
async def choose_sleep_start(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] choose_sleep_start –≤—ñ–¥ {callback.from_user.id}, data={callback.data}")
    try:
        uid = callback.from_user.id
        start = callback.data.split("_")[1]
        user_settings[uid]["sleep_start"] = start
        times = [f"{str(h).zfill(2)}:00" for h in range(24)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=t, callback_data=f"sleepend_{t}")] for t in times
        ])
        await callback.message.answer("üåô –û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è '—Ä–µ–∂–∏–º—É —Å–Ω—É':", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå choose_sleep_start error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—á–∞—Ç–∫—É —Ä–µ–∂–∏–º—É —Å–Ω—É.")
    await callback.answer()

@router.callback_query(F.data.startswith("sleepend_"))
async def choose_sleep_end(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] choose_sleep_end –≤—ñ–¥ {callback.from_user.id}, data={callback.data}")
    try:
        uid = callback.from_user.id
        end = callback.data.split("_")[1]
        start = user_settings[uid].get("sleep_start")
        if start:
            user_settings[uid]["sleep"] = {"start": start, "end": end}
            await callback.message.answer(f"üåô –†–µ–∂–∏–º —Å–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ {start} –¥–æ {end}.")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="reset_settings")]
            ])
            await callback.message.answer("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ —ó—Ö —É –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç:", reply_markup=keyboard)
        else:
            await callback.message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–æ–∫ —Ä–µ–∂–∏–º—É —Å–Ω—É.")
    except Exception as e:
        logger.error(f"‚ùå choose_sleep_end error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Å–Ω—É.")
    await callback.answer()

@router.callback_query(F.data == "sleep_off")
async def disable_sleep_mode(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] disable_sleep_mode –≤—ñ–¥ {callback.from_user.id}")
    try:
        uid = callback.from_user.id
        user_settings[uid].pop("sleep", None)
        user_settings[uid].pop("sleep_start", None)
        await callback.message.answer("‚ùå –†–µ–∂–∏–º —Å–Ω—É –≤–∏–º–∫–Ω–µ–Ω–æ.")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="reset_settings")]
        ])
        await callback.message.answer("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ —ó—Ö —É –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ùå disable_sleep_mode error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω–Ω—ñ —Ä–µ–∂–∏–º—É —Å–Ω—É.")
    await callback.answer()

@router.callback_query(F.data == "reset_settings")
async def reset_settings(callback: types.CallbackQuery):
    logger.info(f"[CALLBACK] reset_settings –≤—ñ–¥ {callback.from_user.id}")
    try:
        user_settings.pop(callback.from_user.id, None)
        await callback.message.answer("üîÑ –í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—á–Ω–µ–º–æ –∑–Ω–æ–≤—É –∑ /start")
    except Exception as e:
        logger.error(f"‚ùå reset_settings error: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.")
    await callback.answer()
