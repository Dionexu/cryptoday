import os
import logging
import asyncio
from aiohttp import web

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import setup_application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s", # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
)
logger = logging.getLogger(__name__) # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.critical("CRITICAL: No BOT_TOKEN provided. Exiting.")
    raise RuntimeError("No BOT_TOKEN provided. –ó–∞–¥–∞–π—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not WEBHOOK_HOST:
    logger.critical("CRITICAL: No WEBHOOK_HOST provided. Exiting.")
    raise RuntimeError("No WEBHOOK_HOST provided. –ó–∞–¥–∞–π—Ç–µ WEBHOOK_HOST –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ WEBHOOK_HOST –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
if not WEBHOOK_HOST.startswith(("http://", "https://")):
    WEBHOOK_HOST = "https://" + WEBHOOK_HOST
    logger.warning(f"WEBHOOK_HOST did not have a scheme, prepended https://. New host: {WEBHOOK_HOST}")

# WEBHOOK_PATH: –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –±–æ—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
# TOKEN.split(':')[0] –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –±–æ—Ç–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
WEBHOOK_PATH = f"/webhook/{TOKEN.split(':')[0]}" # –£–±—Ä–∞–ª os.getenv, —á—Ç–æ–±—ã –ø—É—Ç—å –±—ã–ª –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–∏–º
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# PORT: Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º 3000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ PORT –Ω–µ –∑–∞–¥–∞–Ω.
PORT = int(os.getenv("PORT", "3000"))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram ---
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router() # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ---
# –°—é–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info(f"User {message.from_user.id} ({message.from_user.full_name}) triggered /start command.")
    try:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
            "–Ø —Ç–≤–æ–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ü–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —ç—Ç–æ, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤–æ–º—É!"
        )
        logger.info(f"Successfully replied to /start for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in cmd_start for user {message.from_user.id}: {e}")

# –ü–†–ò–ú–ï–†: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
# @router.message(Command("help"))
# async def cmd_help(message: types.Message):
#     logger.info(f"User {message.from_user.id} triggered /help command.")
#     help_text = (
#         "–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
#         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
#         "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
#         "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
#         # ... –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥ ...
#     )
#     await message.answer(help_text)

# –ú–ï–°–¢–û –î–õ–Ø –í–ê–®–ò–• –î–†–£–ì–ò–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:
# –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã, —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.
# –û–Ω–∏ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Ö–æ–∂–µ:
# @router.message(Command("settings"))
# async def cmd_settings(message: types.Message):
#     # –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
#     await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
#
# @router.message(F.text == "–í—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É") # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ callback-–∫–Ω–æ–ø–æ–∫
# async def handle_select_coin_text(message: types.Message):
#     # –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞
#     await message.answer("–ö–∞–∫—É—é –º–æ–Ω–µ—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?")
#
# –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ ---
async def on_startup(bot_instance: Bot, dispatcher: Dispatcher): # –ü–µ—Ä–µ–¥–∞–µ–º –∏ dispatcher
    webhook_info = await bot_instance.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ URL –¥—Ä—É–≥–æ–π
        await bot_instance.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=dispatcher.resolve_used_update_types(), # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            drop_pending_updates=True # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        )
        logger.info(f"üåê Webhook SET to: {WEBHOOK_URL}")
    else:
        logger.info(f"üåê Webhook already set to: {WEBHOOK_URL}")
    
    me = await bot_instance.get_me()
    logger.info(f"Bot @{me.username} (ID: {me.id}) started!")

async def on_shutdown(bot_instance: Bot):
    logger.info("Shutting down bot...")
    # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –Ω–æ —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ,
    # –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ URL –≤–µ–±—Ö—É–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.
    # –ï—Å–ª–∏ Render —á–∞—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–∏–º.
    # –ù–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –æ—Å—Ç–∞–≤–∏–º:
    try:
        await bot_instance.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook deleted successfully.")
    except Exception as e:
        logger.error(f"Error deleting webhook: {e}")

    await bot_instance.session.close()
    logger.info("üí§ Bot session closed.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä. –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ router —Å—Ç–∞–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω—ã.
    dp.include_router(router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    # –ü–µ—Ä–µ–¥–∞–µ–º bot –∏ dp –≤ on_startup —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã kwargs –¥–ª—è setup_application
    # –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è dp.
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()

    # –ü–µ—Ä–µ–¥–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ startup/shutdown —á–µ—Ä–µ–∑ workflow_data
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, bot_instance –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ on_startup –∏ on_shutdown
    workflow_data = {
        "bot_instance": bot,
        "dispatcher": dp # –ü–µ—Ä–µ–¥–∞–µ–º dispatcher –≤ on_startup –¥–ª—è allowed_updates
    }

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã aiogram –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp
    # –≠—Ç–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç aiogram —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    setup_application(app, dp, **workflow_data)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT) # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    logger.info(f"üöÄ Starting web server on http://0.0.0.0:{PORT}")
    await site.start()

    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º (–ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π)
    try:
        await asyncio.Event().wait()
    finally:
        logger.info("Application is shutting down...")
        await runner.cleanup() # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AppRunner
        logger.info("Application has been shut down.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually (KeyboardInterrupt/SystemExit)!")
    except RuntimeError as e:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤—ã—à–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TOKEN –∏ WEBHOOK_HOST
        # logger.error(f"Critical runtime error during startup: {e}")
        pass # –£–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ
    except Exception as e:
        logger.exception(f"An unhandled exception occurred at the top level: {e}")
