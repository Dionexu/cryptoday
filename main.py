import os
import json
import aiohttp
import asyncio
from datetime import datetime, timezone # –î–æ–±–∞–≤–∏–ª–∏ timezone
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command 
from aiogram.utils.markdown import hcode

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "–í–ê–®_–ë–û–¢_–¢–û–ö–ï–ù_–¢–£–¢") # –ó–∞–º–µ–Ω–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
if BOT_TOKEN == "–í–ê–®_–ë–û–¢_–¢–û–ö–ï–ù_–¢–£–¢":
    print("–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞—à —Å–ø—Ä–∞–≤–∂–Ω—ñ–π BOT_TOKEN!")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å exit() –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    # exit() 

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

DATA_FILE = "user_crypto_preferences.json" 

POPULAR_TOKENS_MAP = {
    'BTC': 'bitcoin', 'ETH': 'ethereum', 'SOL': 'solana', 
    'TON': 'the-open-network', 'DOGE': 'dogecoin', 'LINK': 'chainlink', 
    'ADA': 'cardano', 'DOT': 'polkadot', 'MATIC': 'matic-network', 'ARB': 'arbitrum'
}
POPULAR_TOKENS_ORDER = ['BTC', 'ETH', 'SOL', 'TON', 'DOGE', 'LINK', 'ADA', 'DOT', 'MATIC', 'ARB']

ADMIN_IDS = [696165311, 7923967086] # –í–∞—à–∏ ADMIN_IDS

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ---
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding='utf-8') as f:
                content = f.read()
                if not content: 
                    return {}
                return json.loads(content)
        except json.JSONDecodeError:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ —Ñ–∞–π–ª—É {DATA_FILE}. –§–∞–π–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return {}
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ: {e}")
            return {}
    return {}

def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ: {e}")

def get_default_user_config():
    return {
        "tokens_id": [],            
        "tokens_display": [],       
        "frequency": None,          
        "notification_times_utc": []
    }

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø API COINGECKO ---
async def fetch_price(symbol_id: str):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol_id}&vs_currencies=usd"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get(symbol_id, {}).get("usd", "N/A")
                else:
                    print(f"CoinGecko API error for {symbol_id}: Status {resp.status}, Response: {await resp.text()}")
                    return "ErrorAPI" 
    except asyncio.TimeoutError:
        print(f"CoinGecko API timeout for {symbol_id}")
        return "Timeout"
    except Exception as e:
        print(f"CoinGecko API general error for {symbol_id}: {e}")
        return "Error"
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
    return "N/A"


async def search_token(query: str):
    url = f"https://api.coingecko.com/api/v3/search?query={query}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    coins = result.get("coins", [])
                    if coins:
                        coin = coins[0]
                        return coin.get("id"), coin.get("name"), coin.get("symbol")
                else:
                    print(f"CoinGecko Search API error: Status {resp.status}, Response: {await resp.text()}")
    except asyncio.TimeoutError:
        print(f"CoinGecko Search API timeout for query: {query}")
    except Exception as e:
        print(f"CoinGecko Search API general error for query {query}: {e}")
    return None, None, None

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def get_frequency_description_text(freq_code: str | None, notification_times_utc: list | None = None) -> str:
    if not freq_code:
        return "–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ)"
    if freq_code == "hourly":
        return "–©–æ–≥–æ–¥–∏–Ω–∏"
    elif freq_code == "2_hours":
        return "–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏"
    elif freq_code == "daily_1":
        time_str = notification_times_utc[0] if notification_times_utc and notification_times_utc[0] else "09:00"
        return f"1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å (–æ {time_str} UTC)"
    elif freq_code == "daily_2":
        t1 = notification_times_utc[0] if notification_times_utc and len(notification_times_utc) > 0 else "09:00"
        t2 = notification_times_utc[1] if notification_times_utc and len(notification_times_utc) > 1 else "21:00"
        return f"2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å (–æ {t1} —Ç–∞ {t2} UTC)"
    return "–ù–µ–≤—ñ–¥–æ–º–∞ —á–∞—Å—Ç–æ—Ç–∞"


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò CALLBACK ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = str(message.chat.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = get_default_user_config()
        save_data(data)

    kb_buttons = []
    for i in range(0, len(POPULAR_TOKENS_ORDER), 2):
        row = []
        display_ticker1 = POPULAR_TOKENS_ORDER[i]
        coin_id1 = POPULAR_TOKENS_MAP[display_ticker1]
        row.append(InlineKeyboardButton(text=display_ticker1, callback_data=f"add_{coin_id1}_{display_ticker1}"))
        
        if i + 1 < len(POPULAR_TOKENS_ORDER):
            display_ticker2 = POPULAR_TOKENS_ORDER[i+1]
            coin_id2 = POPULAR_TOKENS_MAP[display_ticker2]
            row.append(InlineKeyboardButton(text=display_ticker2, callback_data=f"add_{coin_id2}_{display_ticker2}"))
        kb_buttons.append(row)
    
    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.\n\n"
        "üì• <b>–û–±–µ—Ä–∏ –¥–æ 5 –º–æ–Ω–µ—Ç –∑—ñ —Å–ø–∏—Å–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö:</b>", 
        reply_markup=kb, parse_mode="HTML"
    )
    await message.answer(
        "üîç <b>–ê–±–æ –Ω–∞–ø–∏—à–∏ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è (—Ç—ñ–∫–µ—Ä) –º–æ–Ω–µ—Ç–∏</b> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `arb` –∞–±–æ `Bitcoin`), —â–æ–± –∑–Ω–∞–π—Ç–∏ —ó—ó —á–µ—Ä–µ–∑ –ø–æ—à—É–∫.\n\n"
        "–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–Ω–µ—Ç, –Ω–∞–ª–∞—à—Ç—É–π —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ—é /setfrequency.\n\n"
        "<b>–Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/mycryptoconfig - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
        "/resetcrypto - —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/stopcryptonotifications - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü—ñ–Ω–∏",
        parse_mode="HTML"
    )

@dp.message(Command("mycryptoconfig"))
async def my_config_cmd(message: types.Message):
    user_id = str(message.chat.id)
    data = load_data()
    user_config = data.get(user_id)

    if not user_config:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –ü–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start.")
        return

    tokens_display_str = ", ".join(user_config.get("tokens_display", []))
    if not tokens_display_str:
        tokens_display_str = "–Ω–µ –æ–±—Ä–∞–Ω–æ"
    
    frequency_code = user_config.get("frequency")
    notification_times = user_config.get("notification_times_utc")
    freq_desc = get_frequency_description_text(frequency_code, notification_times)

    await message.answer(
        f"<b>‚öôÔ∏è –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n\n"
        f"<b>–û–±—Ä–∞–Ω—ñ –º–æ–Ω–µ—Ç–∏:</b> {tokens_display_str}\n"
        f"<b>–ß–∞—Å—Ç–æ—Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å:</b> {freq_desc}\n\n"
        "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ (—Å—Ç–∞—Ä—ñ –∑–∞–ª–∏—à–∞—Ç—å—Å—è, —è–∫—â–æ —ó—Ö –º–µ–Ω—à–µ 5) –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /resetcrypto.\n"
        "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /setfrequency.",
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_token_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    try:
        _, coin_id, display_ticker = callback_query.data.split("_", 2)
    except ValueError:
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
        return

    data = load_data()
    user_config = data.get(user_id, get_default_user_config())

    tokens_id_list = user_config.get("tokens_id", [])
    tokens_display_list = user_config.get("tokens_display", [])

    if coin_id in tokens_id_list:
        await callback_query.answer(f"{display_ticker} –≤–∂–µ –æ–±—Ä–∞–Ω–æ", show_alert=False)
        return

    if len(tokens_id_list) >= 5:
        await callback_query.answer("–í–∂–µ –æ–±—Ä–∞–Ω–æ 5 –º–æ–Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º.", show_alert=True)
        return

    tokens_id_list.append(coin_id)
    tokens_display_list.append(display_ticker)
    
    user_config["tokens_id"] = tokens_id_list
    user_config["tokens_display"] = tokens_display_list
    data[user_id] = user_config
    save_data(data)

    await callback_query.answer(f"–î–æ–¥–∞–Ω–æ {display_ticker}", show_alert=False)
    await bot.send_message(user_id, f"‚úÖ –î–æ–¥–∞–Ω–æ: {display_ticker} (ID: {hcode(coin_id)})", parse_mode="HTML")

    if len(tokens_id_list) >= 5:
        await bot.send_message(user_id, "–í–∏ –æ–±—Ä–∞–ª–∏ 5 –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å: /setfrequency")
    elif len(tokens_id_list) > 0:
        await bot.send_message(user_id, "–©–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /setfrequency")

@dp.message(Command("setfrequency"))
async def set_frequency_cmd(message: types.Message):
    user_id = str(message.chat.id)
    data = load_data()
    user_config = data.get(user_id)

    if not user_config or not user_config.get("tokens_id"):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É.\n"
                             "–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ —á–µ—Ä–µ–∑ /start –∞–±–æ –Ω–∞–ø–∏—Å–∞–≤—à–∏ —Ç—ñ–∫–µ—Ä –º–æ–Ω–µ—Ç–∏ –≤ —á–∞—Ç.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–©–æ–≥–æ–¥–∏–Ω–∏", callback_data="setfreq_hourly")],
        [InlineKeyboardButton(text="–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏", callback_data="setfreq_2_hours")],
        [InlineKeyboardButton(text="1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å (09:00 UTC)", callback_data="setfreq_daily_1_09:00")],
        [InlineKeyboardButton(text="2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å (09:00, 21:00 UTC)", callback_data="setfreq_daily_2_09:00_21:00")],
        [InlineKeyboardButton(text="üö´ –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="setfreq_off")]
    ])
    await message.answer("‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å (—á–∞—Å –≤–∫–∞–∑–∞–Ω–æ –≤ UTC):", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("setfreq_"))
async def process_frequency_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    action_parts = callback_query.data.split("_") 
    
    frequency_selection = action_parts[1] 
    
    data = load_data()
    user_config = data.get(user_id, get_default_user_config())

    new_frequency = None
    new_times_utc = []

    if frequency_selection == "off":
        new_frequency = None
        # await callback_query.answer("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.", show_alert=False) # –£–±—Ä–∞–ª, —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
    elif frequency_selection == "hourly":
        new_frequency = "hourly"
    elif frequency_selection == "2": 
        new_frequency = "2_hours"
    elif frequency_selection == "daily":
        if action_parts[2] == "1": 
            new_frequency = "daily_1"
            new_times_utc = [action_parts[3]] 
        elif action_parts[2] == "2": 
            new_frequency = "daily_2"
            new_times_utc = [action_parts[3], action_parts[4]] 
    
    user_config["frequency"] = new_frequency
    user_config["notification_times_utc"] = new_times_utc
    data[user_id] = user_config
    save_data(data)
    
    final_freq_desc = get_frequency_description_text(new_frequency, new_times_utc)
    await callback_query.message.edit_text(f"‚úÖ –ß–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>{final_freq_desc}</b>", parse_mode="HTML")
    if new_frequency: 
      await callback_query.answer(f"–ß–∞—Å—Ç–æ—Ç—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {final_freq_desc}", show_alert=False)
    else: # –ï—Å–ª–∏ "off"
      await callback_query.answer("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.", show_alert=False)


@dp.message(Command("resetcrypto")) 
async def reset_crypto_all_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    if user_id in data:
        data[user_id] = get_default_user_config()
        save_data(data)
        await message.answer("‚ôªÔ∏è –í—Å—ñ –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–∫–∏–Ω—É—Ç–æ. /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
    else:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è.")

@dp.callback_query(lambda c: c.data == "reset_all_crypto")
async def reset_crypto_all_callback(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    data = load_data()
    if user_id in data:
        data[user_id] = get_default_user_config()
        save_data(data)
    try:
        await callback_query.message.edit_text("‚ôªÔ∏è –í—Å—ñ –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–∫–∏–Ω—É—Ç–æ. /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
    except Exception: 
        await bot.send_message(user_id, "‚ôªÔ∏è –í—Å—ñ –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–∫–∏–Ω—É—Ç–æ. /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
    await callback_query.answer("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ", show_alert=False)


@dp.message(Command("stopcryptonotifications"))
async def stop_crypto_notifications_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    user_config = data.get(user_id)

    if user_config and user_config.get("frequency") is not None:
        user_config["frequency"] = None
        user_config["notification_times_utc"] = [] 
        data[user_id] = user_config
        save_data(data)
        await message.answer("‚ùå –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ.")
    else:
        await message.answer("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∂–µ –≤–∏–º–∫–Ω–µ–Ω—ñ –∞–±–æ –Ω–µ –±—É–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.")

# --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ---
async def price_update_scheduler():
    await asyncio.sleep(15) 
    print(f"[{datetime.now(timezone.utc).isoformat()}] –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —Ü—ñ–Ω–∏ –∑–∞–ø—É—â–µ–Ω–æ.")
    
    while True:
        now_utc = datetime.now(timezone.utc) 
        current_time_utc_str = now_utc.strftime("%H:%M")
        current_hour_utc = now_utc.hour
        
        all_users_data = load_data() 
        
        active_tasks = []

        for user_id_str, user_config in all_users_data.items():
            try:
                user_id_int = int(user_id_str) 
            except ValueError:
                print(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id –≤ –¥–∞–Ω–∏—Ö: {user_id_str}")
                continue

            frequency = user_config.get("frequency")
            tokens_id_list = user_config.get("tokens_id")

            if not frequency or not tokens_id_list: 
                continue

            should_send = False
            if frequency == "hourly":
                if now_utc.minute == 0: 
                    should_send = True
            elif frequency == "2_hours":
                if current_hour_utc % 2 == 0 and now_utc.minute == 0: 
                    should_send = True
            elif frequency == "daily_1":
                times_utc = user_config.get("notification_times_utc", [])
                if times_utc and current_time_utc_str == times_utc[0]:
                    should_send = True
            elif frequency == "daily_2":
                times_utc = user_config.get("notification_times_utc", [])
                if times_utc and current_time_utc_str in times_utc:
                    should_send = True
            
            if should_send:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                active_tasks.append(send_user_price_update(user_id_int, user_config, frequency))
        
        if active_tasks:
            print(f"[{datetime.now(timezone.utc).isoformat()}] –ó–Ω–∞–π–¥–µ–Ω–æ {len(active_tasks)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
            await asyncio.gather(*active_tasks) # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def send_user_price_update(user_id_int: int, user_config: dict, frequency: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    print(f"[{datetime.now(timezone.utc).isoformat()}] –ù–∞–¥—Å–∏–ª–∞—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è {user_id_int} (—á–∞—Å—Ç–æ—Ç–∞: {frequency})")
    tokens_id_list = user_config.get("tokens_id", [])
    prices_info = []
    
    display_names = user_config.get("tokens_display", [])
    if not display_names or len(display_names) != len(tokens_id_list):
        display_names = [tid.capitalize() for tid in tokens_id_list] 

    for i, token_cg_id in enumerate(tokens_id_list):
        price = await fetch_price(token_cg_id) # await –∑–¥–µ—Å—å
        token_display_name = display_names[i] if i < len(display_names) else token_cg_id.capitalize()
        
        if isinstance(price, (int, float)):
            prices_info.append(f"{token_display_name}: ${price:,.2f}")
        else: 
            prices_info.append(f"{token_display_name}: ${price}") # price —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "N/A", "ErrorAPI" –∏ —Ç.–¥.
    
    if prices_info:
        freq_text_for_msg = get_frequency_description_text(frequency, user_config.get("notification_times_utc"))
        header = f"<b>üìà –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω ({freq_text_for_msg.lower()})</b>"
        message_body = "\n".join(prices_info)
        final_message = f"{header}\n{message_body}"
        
        kb_after_price = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="reset_all_crypto")],
            [InlineKeyboardButton(text="‚ùå –ó—É–ø–∏–Ω–∏—Ç–∏ —Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="setfreq_off")]
        ])
        try:
            await bot.send_message(user_id_int, final_message, reply_markup=kb_after_price, parse_mode="HTML")
        except Exception as e:
            error_msg = str(e).lower()
            user_id_str = str(user_id_int) # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            if "bot was blocked" in error_msg or "user is deactivated" in error_msg or "chat not found" in error_msg:
                print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id_int} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î. –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
                current_data_for_delete = load_data()
                if user_id_str in current_data_for_delete:
                    del current_data_for_delete[user_id_str]
                    save_data(current_data_for_delete)
            else:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id_int}: {e}")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–ê–î–ú–ò–ù / –ü–û–ò–°–ö –¢–û–ö–ï–ù–ê) ---
@dp.message() 
async def handle_text_input(message: types.Message):
    user_id_str = str(message.chat.id)
    # user_id_int = message.chat.id # –£–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å, —Ç.–∫. bot.send_message –ø—Ä–∏–Ω–∏–º–∞–µ—Ç str
    text = message.text.strip()
    
    if message.from_user.id in ADMIN_IDS:
        if not text.startswith("/"): 
            all_users_data = load_data()
            sent_count = 0
            failed_count = 0
            
            active_subscribers = [uid_s for uid_s, info in all_users_data.items() if info.get("frequency")]

            if not active_subscribers:
                await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ—é —á–∞—Å—Ç–æ—Ç–æ—é).")
                return

            for uid_to_send_str in active_subscribers:
                try:
                    await bot.send_message(uid_to_send_str, text) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID
                    sent_count += 1
                except Exception as e:
                    failed_count += 1
                    print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–¥–º—ñ–Ω–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {uid_to_send_str}: {e}")
            
            await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.\n"
                                 f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: {len(active_subscribers)}\n"
                                 f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n"
                                 f"–ü–æ–º–∏–ª–æ–∫: {failed_count}")
            return 

    if text and not text.startswith("/"):
        all_users_data = load_data() 
        user_config = all_users_data.get(user_id_str, get_default_user_config())

        tokens_id_list = user_config.get("tokens_id", [])
        tokens_display_list = user_config.get("tokens_display", [])

        if len(tokens_id_list) >= 5:
            await message.answer("‚ùó –¢–∏ –≤–∂–µ –æ–±—Ä–∞–≤ 5 –º–æ–Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º.\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /resetcrypto —ñ –¥–æ–¥–∞–π –Ω–æ–≤—ñ.")
            return

        coin_id, coin_name, coin_symbol_api = await search_token(text.lower())

        if not coin_id:
            await message.answer(f"‚ùå –ú–æ–Ω–µ—Ç—É '{text}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç –∞–±–æ —Ç—ñ–∫–µ—Ä.")
            return
        
        display_name_to_add = coin_symbol_api.upper() if coin_symbol_api else coin_name

        if coin_id in tokens_id_list:
            await message.answer(f"‚ÑπÔ∏è –ú–æ–Ω–µ—Ç–∞ {display_name_to_add} (ID: {hcode(coin_id)}) –≤–∂–µ –æ–±—Ä–∞–Ω–∞.", parse_mode="HTML")
            return

        tokens_id_list.append(coin_id)
        tokens_display_list.append(display_name_to_add)
        
        user_config["tokens_id"] = tokens_id_list
        user_config["tokens_display"] = tokens_display_list
        all_users_data[user_id_str] = user_config
        save_data(all_users_data)

        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ: {display_name_to_add} (ID: {hcode(coin_id)})", parse_mode="HTML")
        
        if len(tokens_id_list) >= 5:
            await message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ 5 –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å: /setfrequency")
        elif len(tokens_id_list) > 0:
            await message.answer("–©–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /setfrequency")
        return 
    
# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main(): 
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(start_cmd, Command(commands=["start"]))
    dp.message.register(my_config_cmd, Command(commands=["mycryptoconfig"]))
    dp.message.register(set_frequency_cmd, Command(commands=["setfrequency"]))
    dp.message.register(reset_crypto_all_cmd, Command(commands=["resetcrypto"]))
    dp.message.register(stop_crypto_notifications_cmd, Command(commands=["stopcryptonotifications"]))
    
    dp.callback_query.register(add_token_callback, lambda c: c.data.startswith("add_"))
    dp.callback_query.register(process_frequency_callback, lambda c: c.data.startswith("setfreq_"))
    dp.callback_query.register(reset_crypto_all_callback, lambda c: c.data == "reset_all_crypto")
    # Callback –¥–ª—è `setfreq_off` —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ `process_frequency_callback`

    dp.message.register(handle_text_input) 

    asyncio.create_task(price_update_scheduler())
    
    print(f"[{datetime.now(timezone.utc).isoformat()}] –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close() 
        print(f"[{datetime.now(timezone.utc).isoformat()}] –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"[{datetime.now(timezone.utc).isoformat()}] –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É (Ctrl+C)")
    except Exception as e:
        print(f"[{datetime.now(timezone.utc).isoformat()}] –í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É: {e}")
