import os
import asyncio
import logging
from aiohttp import web
from datetime import datetime, timedelta
import aiohttp

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("No BOT_TOKEN provided.")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
if not WEBHOOK_HOST:
    raise RuntimeError("No WEBHOOK_HOST provided.")

if not WEBHOOK_HOST.startswith(("http://", "https://")):
    WEBHOOK_HOST = "https://" + WEBHOOK_HOST

WEBHOOK_PATH = f"/webhook/{TOKEN.split(':')[0]}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = int(os.getenv("PORT", "3000"))

bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

user_settings = {}
coin_list_cache = None

@router.callback_query(F.data == "select_frequency")
async def ask_frequency(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–©–æ–≥–æ–¥–∏–Ω–∏", callback_data="freq_1h")],
        [InlineKeyboardButton(text="–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏", callback_data="freq_2h")],
        [InlineKeyboardButton(text="2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å", callback_data="freq_12h")],
        [InlineKeyboardButton(text="1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å", callback_data="freq_24h")]
    ])
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —è–∫ —á–∞—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ü—ñ–Ω–∏:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("freq_"))
async def handle_frequency(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    freq = callback.data.replace("freq_", "")

    if freq not in ["1h", "2h", "12h", "24h"]:
        await callback.message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏.")
        return

    user_data = user_settings.setdefault(user_id, {})
    user_data["frequency"] = freq

    if freq in ["12h", "24h"]:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="08:00", callback_data="time_08:00"),
             InlineKeyboardButton(text="12:00", callback_data="time_12:00")],
            [InlineKeyboardButton(text="16:00", callback_data="time_16:00"),
             InlineKeyboardButton(text="20:00", callback_data="time_20:00")]
        ])
        await callback.message.answer("üïê –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ (UTC):", reply_markup=keyboard)
    else:
        await callback.message.answer(f"‚úÖ –ß–∞—Å—Ç–æ—Ç—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {freq}")

    await callback.answer()


@router.callback_query(F.data.startswith("time_"))
async def handle_time(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    time_val = callback.data.replace("time_", "")
    user_data = user_settings.setdefault(user_id, {})

    if "time" not in user_data:
        user_data["time"] = time_val
        freq = user_data.get("frequency")

        if freq == "12h":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="08:00", callback_data="time2_08:00"),
                 InlineKeyboardButton(text="12:00", callback_data="time2_12:00")],
                [InlineKeyboardButton(text="16:00", callback_data="time2_16:00"),
                 InlineKeyboardButton(text="20:00", callback_data="time2_20:00")]
            ])
            await callback.message.answer("üïë –û–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥–∏–π —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ (UTC):", reply_markup=keyboard)
        else:
            await callback.message.answer(f"‚úÖ –ß–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_val}")
    else:
        await callback.message.answer("‚ö†Ô∏è –ß–∞—Å —É–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ ‚Äî —Å–∫–∏–Ω—å—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")

    await callback.answer()


@router.callback_query(F.data.startswith("time2_"))
async def handle_second_time(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    second_time = callback.data.replace("time2_", "")
    user_data = user_settings.setdefault(user_id, {})
    user_data["second_time"] = second_time

    await callback.message.answer(f"‚úÖ –î—Ä—É–≥–∏–π —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {second_time}")
    await callback.answer()


@router.callback_query(F.data == "select_coins")
async def ask_coin_selection(callback: types.CallbackQuery):
    user_data = user_settings.setdefault(callback.from_user.id, {})
    user_data["coins"] = []
    user_data["mode"] = "selecting_coins"
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ ID –º–æ–Ω–µ—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, bitcoin, solana, dogecoin). –í–≤–µ–¥—ñ—Ç—å '–≥–æ—Ç–æ–≤–æ', –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∏–±—ñ—Ä.")
    await callback.answer()


@router.callback_query(F.data == "reset_settings")
async def handle_reset(callback: types.CallbackQuery):
    user_settings.pop(callback.from_user.id, None)
    await callback.message.answer("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start –∞–±–æ –æ–±—Ä–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏.")
    await callback.answer()


@router.message()
async def handle_coin_text(message: types.Message):
    global coin_list_cache
    user_id = message.from_user.id
    user_data = user_settings.get(user_id)

    if not user_data:
        user_settings[user_id] = {}
        return

    if user_data.get("mode") != "selecting_coins":
        return

    coin = message.text.lower()

    if coin == "–≥–æ—Ç–æ–≤–æ":
        user_data["mode"] = None
        await message.answer("‚úÖ –ú–æ–Ω–µ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∏–≤–∏—Ç–∏—Å—è —Ü—ñ–Ω–∏'.")
        return

    try:
        if coin_list_cache is None:
            async with aiohttp.ClientSession() as session:
                url = "https://api.coingecko.com/api/v3/coins/list"
                async with session.get(url) as resp:
                    coin_list_cache = await resp.json()

        all_coins = coin_list_cache
        if not isinstance(all_coins, list) or not all(isinstance(c, dict) for c in all_coins):
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–Ω–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        id_map = {c['id']: c['id'] for c in all_coins}
        symbol_map = {c['symbol']: c['id'] for c in all_coins}
        valid_ids = set(id_map.keys()).union(symbol_map.keys())

        if coin not in valid_ids:
            await message.answer("‚ùå –¢–∞–∫–æ—ó –º–æ–Ω–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        if coin in symbol_map:
            coin = symbol_map[coin]

        coins = user_data.setdefault("coins", [])

        if coin in coins:
            await message.answer("‚ÑπÔ∏è –¶—é –º–æ–Ω–µ—Ç—É –≤–∂–µ –¥–æ–¥–∞–Ω–æ.")
        elif len(coins) >= 5:
            await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º 5 –º–æ–Ω–µ—Ç.")
        else:
            coins.append(coin)
            await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {coin.upper()} ({len(coins)}/5)")

    except Exception as e:
        logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –º–æ–Ω–µ—Ç–∏: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")


@router.callback_query(F.data == "get_prices")
async def handle_prices(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    coins = user_settings.get(user_id, {}).get("coins", ["bitcoin", "ethereum"])
    text = "üìà –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:"

    try:
        async with aiohttp.ClientSession() as session:
            for coin in coins:
                url = "https://api.coingecko.com/api/v3/simple/price"
                params = {"ids": coin, "vs_currencies": "usd"}
                async with session.get(url, params=params) as resp:
                    data = await resp.json()
                    price = data.get(coin, {}).get("usd")
                    if price:
                        text += f"{coin.capitalize()}: ${price}"
        await callback.message.answer(text.strip())
    except Exception as e:
        logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω: {e}")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïí –û–±—Ä–∞—Ç–∏ —á–∞—Å—Ç–æ—Ç—É", callback_data="select_frequency")],
        [InlineKeyboardButton(text="üìà –î–∏–≤–∏—Ç–∏—Å—è —Ü—ñ–Ω–∏", callback_data="get_prices")],
        [InlineKeyboardButton(text="‚öôÔ∏è –û–±—Ä–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏", callback_data="select_coins")],
        [InlineKeyboardButton(text="üîÑ –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="reset_settings")]
    ])
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏.", reply_markup=keyboard)


# === Webhook server setup ===

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
