import os
import asyncio
from datetime import datetime, timezone
from aiogram import Bot, Dispatcher
from aiohttp import web

BOT_TOKEN = os.getenv("BOT_TOKEN")
PLACEHOLDER_TOKEN = "–í–ê–®_–ë–û–¢_–¢–û–ö–ï–ù_–¢–£–¢_–ó–ê–ú–ï–ù–ò–¢–ï_–ò–õ–ò_–£–°–¢–ê–ù–û–í–ò–¢–ï_–ü–ï–†–ï–ú–ï–ù–ù–£–Æ"

if not BOT_TOKEN or BOT_TOKEN == PLACEHOLDER_TOKEN:
    print(f"[{datetime.now(timezone.utc).isoformat()}] ‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ —î –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º.")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- Health-check –¥–ª—è Render ---
async def handle_healthz(request):
    return web.Response(text="OK", status=200)

async def start_web_server():
    app = web.Application()
    app.router.add_get("/healthz", handle_healthz)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 10000)
    await site.start()
    print(f"[{datetime.now(timezone.utc).isoformat()}] üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 10000 (Render health check)")

# --- Telegram polling ---
async def start_bot():
    await bot.delete_webhook(drop_pending_updates=True)
    print(f"[{datetime.now(timezone.utc).isoformat()}] ü§ñ –í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ. –°—Ç–∞—Ä—Ç—É—î polling...")
    await dp.start_polling(bot, skip_updates=True)

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É ---
async def main():
    print(f"[{datetime.now(timezone.utc).isoformat()}] üöÄ –°—Ç–∞—Ä—Ç—É—î–º–æ main()")
    await asyncio.gather(
        start_web_server(),
        start_bot()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"[{datetime.now(timezone.utc).isoformat()}] üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Ä—É—á–Ω—É (Ctrl+C)")
    except Exception as e:
        print(f"[{datetime.now(timezone.utc).isoformat()}] ‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
