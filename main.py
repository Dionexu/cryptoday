import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

BOT_TOKEN = "8006649444:AAFa1DsYuT8riikAqv6wUz3Qs_IC5KNotIw"
WEBHOOK_SECRET = "abc123"
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
BASE_WEBHOOK_URL = "https://bot-b14f.onrender.com"
WEBHOOK_URL = BASE_WEBHOOK_URL + WEBHOOK_PATH

ADMIN_IDS = [123456789]  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π Telegram ID

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ======= –°–¢–ê–†–¢ =======
@dp.message(Command("start"))
async def start_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—Ä–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏", callback_data="select_coins")]
    ])
    await message.answer("üëã –í—ñ—Ç–∞—é! –ü–æ—á–Ω–µ–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", reply_markup=kb)

# ======= –í–ò–ë–Ü–† –ú–û–ù–ï–¢ =======
@dp.callback_query(F.data == "select_coins")
async def choose_coins(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="BTC", callback_data="coin_btc")],
        [InlineKeyboardButton(text="ETH", callback_data="coin_eth")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="coins_done")]
    ])
    await callback.message.edit_text("ü™ô –û–±–µ—Ä–∏ –º–æ–Ω–µ—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", reply_markup=kb)

# ======= –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ú–û–ù–ï–¢ =======
user_config = {}

@dp.callback_query(lambda c: c.data.startswith("coin_"))
async def add_coin(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    coin = callback.data.replace("coin_", "")
    if user_id not in user_config:
        user_config[user_id] = {"coins": []}
    if coin not in user_config[user_id]["coins"]:
        user_config[user_id]["coins"].append(coin)
    await callback.answer(f"{coin.upper()} –¥–æ–¥–∞–Ω–æ ‚úÖ")

@dp.callback_query(F.data == "coins_done")
async def coins_done(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å", callback_data="set_frequency")]
    ])
    await callback.message.edit_text("‚úÖ –ú–æ–Ω–µ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –æ–Ω–æ–≤–ª–µ–Ω—å:", reply_markup=kb)

# ======= –ß–ê–°–¢–û–¢–ê –û–ù–û–í–õ–ï–ù–¨ =======
@dp.callback_query(F.data == "set_frequency")
async def choose_frequency(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ–∂–Ω—ñ 6 –≥–æ–¥", callback_data="freq_6h")],
        [InlineKeyboardButton(text="–ö–æ–∂–Ω—ñ 12 –≥–æ–¥", callback_data="freq_12h")],
        [InlineKeyboardButton(text="–ö–æ–∂–Ω—ñ 24 –≥–æ–¥", callback_data="freq_24h")]
    ])
    await callback.message.edit_text("üìÖ –û–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("freq_"))
async def save_frequency(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    freq = callback.data.replace("freq_", "")
    user_config[user_id]["frequency"] = freq
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å", callback_data="set_timezone")]
    ])
    await callback.message.edit_text(f"‚úÖ –ß–∞—Å—Ç–æ—Ç—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {freq} –≥–æ–¥.\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", reply_markup=kb)

# ======= –ß–ê–°–û–í–ò–ô –ü–û–Ø–° =======
@dp.callback_query(F.data == "set_timezone")
async def choose_timezone(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="GMT+2", callback_data="tz_2")],
        [InlineKeyboardButton(text="GMT+3", callback_data="tz_3")],
        [InlineKeyboardButton(text="GMT+4", callback_data="tz_4")]
    ])
    await callback.message.edit_text("üïí –û–±–µ—Ä–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("tz_"))
async def save_timezone(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    tz = callback.data.replace("tz_", "")
    user_config[user_id]["timezone"] = tz
    await callback.message.edit_text(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")

# ======= –†–û–ó–°–ò–õ–ö–ê –î–õ–Ø –ê–î–ú–Ü–ù–Ü–í =======
async def notify_admins(text: str):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"üì¢ <b>–ê–¥–º—ñ–Ω-—Ä–æ–∑—Å–∏–ª–∫–∞:</b>\n{text}")
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

# ======= –ó–ê–ü–£–°–ö =======
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    print(f"üöÄ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    print("üßπ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É.")

def create_app():
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp)
    return app

if __name__ == "__main__":
    web.run_app(create_app(), port=10000)
